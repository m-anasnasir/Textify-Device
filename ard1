#include <WiFi.h>
#include <SPI.h>
#include <SD.h>
#include <ArduinoJson.h>
#include <HTTPClient.h>
#include <driver/i2s.h>
#include <WebServer.h>
#include <WiFiManager.h>

#define SD_CS_PIN 5
#define SAMPLE_RATE 16000
#define SAMPLE_BUFFER_SIZE 512
#define CHUNK_DURATION_MS 10000
#define LED_PIN 2
#define MAX_RING_BUFFER_SIZE 32768  // 32KB audio ring buffer

// Maximum pending uploads in queue
#define UPLOAD_QUEUE_LENGTH 4

// Circular buffer for audio data
int16_t audioRingBuffer[MAX_RING_BUFFER_SIZE / 2];  // Sized for int16_t data
volatile int ringBufferHead = 0;
volatile int ringBufferTail = 0;
SemaphoreHandle_t ringBufferMutex;

bool isIntroRecording = false;
File introFile;
uint32_t introBytesWritten = 0;
unsigned long introStartTime = 0;
int introCount = 1;
String currentIntroFilePath = "";

File audioFile;
int16_t raw_samples[SAMPLE_BUFFER_SIZE];
uint32_t totalBytesWritten = 0;
int meetingCount = 1;
bool isRecording = false;
bool stopRequested = false;
unsigned long chunkStartTime = 0;
String currentFilePath = "";
TaskHandle_t recordingTaskHandle = NULL;

WebServer server(80);
QueueHandle_t uploadQueue;

struct WAVHeader {
  char riff[4];
  uint32_t fileSize;
  char wave[4];
  char fmtChunkMarker[4];
  uint32_t fmtChunkSize;
  uint16_t audioFormat;
  uint16_t numChannels;
  uint32_t sampleRate;
  uint32_t byteRate;
  uint16_t blockAlign;
  uint16_t bitsPerSample;
  char dataChunkMarker[4];
  uint32_t dataChunkSize;
};

WAVHeader header;

static const i2s_config_t i2s_config = {
  .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),
  .sample_rate = SAMPLE_RATE,
  .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
  .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
  .communication_format = I2S_COMM_FORMAT_I2S,
  .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
  .dma_buf_count = 4,
  .dma_buf_len = 1024,
  .use_apll = false,
  .tx_desc_auto_clear = false,
  .fixed_mclk = 0
};

static const i2s_pin_config_t i2s_mic_pins = {
  .bck_io_num = GPIO_NUM_14,
  .ws_io_num = GPIO_NUM_15,
  .data_out_num = I2S_PIN_NO_CHANGE,
  .data_in_num = GPIO_NUM_32
};

// Returns available space in the ring buffer
int ringBufferAvailableSpace() {
  if (ringBufferHead >= ringBufferTail) {
    return (MAX_RING_BUFFER_SIZE / 2) - (ringBufferHead - ringBufferTail) - 1;
  } else {
    return ringBufferTail - ringBufferHead - 1;
  }
}

// Returns amount of data available to read in the ring buffer
int ringBufferAvailableData() {
  if (ringBufferHead >= ringBufferTail) {
    return ringBufferHead - ringBufferTail;
  } else {
    return (MAX_RING_BUFFER_SIZE / 2) - (ringBufferTail - ringBufferHead);
  }
}

// Write data to the ring buffer
void writeToRingBuffer(int16_t* data, size_t len) {
  if (xSemaphoreTake(ringBufferMutex, pdMS_TO_TICKS(10)) == pdTRUE) {
    for (size_t i = 0; i < len / 2; i++) {  // len is in bytes, so divide by 2 for int16_t
      audioRingBuffer[ringBufferHead] = data[i];
      ringBufferHead = (ringBufferHead + 1) % (MAX_RING_BUFFER_SIZE / 2);

      // If we're about to overlap with tail, move tail forward
      if (ringBufferHead == ringBufferTail) {
        ringBufferTail = (ringBufferTail + 1) % (MAX_RING_BUFFER_SIZE / 2);
      }
    }
    xSemaphoreGive(ringBufferMutex);
  }
}

// Read data from the ring buffer
size_t readFromRingBuffer(int16_t* data, size_t max_items) {
  size_t read_items = 0;

  if (xSemaphoreTake(ringBufferMutex, pdMS_TO_TICKS(10)) == pdTRUE) {
    size_t available = ringBufferAvailableData();
    size_t to_read = min(available, max_items);

    for (size_t i = 0; i < to_read; i++) {
      data[i] = audioRingBuffer[ringBufferTail];
      ringBufferTail = (ringBufferTail + 1) % (MAX_RING_BUFFER_SIZE / 2);
      read_items++;
    }

    xSemaphoreGive(ringBufferMutex);
  }

  return read_items * 2; // Return bytes read
}

// Persistent uploader task that pulls file paths from the queue and uploads them
void uploaderTask(void* /*param*/) {
  String path;
  for (;;) {
    if (xQueueReceive(uploadQueue, &path, portMAX_DELAY) == pdPASS) {
      if (path.startsWith("/")) path = path.substring(1);

      String requestURL = "http://192.168.1.173:3000/api/v1/presigned-url?filename=" + path;

      HTTPClient http;
      http.begin(requestURL);
      int code = http.GET();
      if (code != 200) {
        Serial.printf("‚ùå presign GET failed %d for %s\n", code, path.c_str());
        http.end();
        continue;
      }

      String body = http.getString();
      http.end();

      StaticJsonDocument<512> doc;
      if (deserializeJson(doc, body) != DeserializationError::Ok || !doc.containsKey("url")) {
        Serial.printf("‚ùå bad presign payload for %s\n", path.c_str());
        continue;
      }
      String presigned = doc["url"].as<String>();

      File f = SD.open("/" + path);
      if (!f) {
        Serial.printf("‚ùå cannot open %s for upload\n", path.c_str());
        continue;
      }
      HTTPClient putClient;
      putClient.begin(presigned);
      putClient.addHeader("Content-Type", "audio/wav");
      int putCode = putClient.sendRequest("PUT", &f, f.size());
      Serial.printf("üì§ upload %s -> %d\n", path.c_str(), putCode);
      putClient.end();
      f.close();
    }
  }
}

void recordingTask(void* parameter) {
  while (true) {
    size_t bytes_read = 0;
    esp_err_t result = i2s_read(I2S_NUM_0, raw_samples, sizeof(raw_samples), &bytes_read, portMAX_DELAY);

    if (result == ESP_OK && bytes_read > 0) {
      // Always put audio data into buffer regardless of recording state
      writeToRingBuffer(raw_samples, bytes_read);
    }

    vTaskDelay(1);
  }
}

void processingTask(void* parameter) {
  int16_t process_buffer[SAMPLE_BUFFER_SIZE];

  while (true) {
    if (isRecording) {
      if (millis() - chunkStartTime >= CHUNK_DURATION_MS) {
        updateWAVHeader(audioFile, totalBytesWritten);
        audioFile.close();

        // Enqueue the chunk for upload
        String fullPath = "/meetings/meeting" + String(meetingCount) + ".wav";
        if (xQueueSend(uploadQueue, &fullPath, 0) != pdPASS) {
          Serial.println("‚ö†Ô∏è upload queue full, dropping upload for " + fullPath);
        }

        meetingCount++;

        if (!stopRequested) {
          currentFilePath = "/meetings/meeting" + String(meetingCount) + ".wav";
          audioFile = SD.open(currentFilePath, FILE_WRITE);
          if (!audioFile) {
            Serial.println("‚ùå Failed to open file for recording");
            isRecording = false;
            break;
          }
          writeWAVHeaderPlaceholder(audioFile);
          totalBytesWritten = 0;
          chunkStartTime = millis();
          Serial.print("üéô Recording continued to: ");
          Serial.println(currentFilePath);
        } else {
          isRecording = false;
          stopRequested = false;
          Serial.println("üõë Recording stopped after final chunk.");
        }
      }

      if (audioFile) {
        size_t bytes_read = readFromRingBuffer(process_buffer, SAMPLE_BUFFER_SIZE);
        if (bytes_read > 0) {
          audioFile.write((uint8_t *)process_buffer, bytes_read);
          totalBytesWritten += bytes_read;
        }
      }
    }

    if (isIntroRecording) {
      size_t bytes_read = readFromRingBuffer(process_buffer, SAMPLE_BUFFER_SIZE);
      if (bytes_read > 0 && introFile) {
        introFile.write((uint8_t *)process_buffer, bytes_read);
        introBytesWritten += bytes_read;
      }
    }

    vTaskDelay(1);
  }
}

void connectWiFi() {
  WiFiManager wifiManager;
  wifiManager.resetSettings();
  wifiManager.setTimeout(180);
  delay(1000);

  Serial.println("Starting WiFi configuration AP...");
  if (!wifiManager.startConfigPortal("Textify")) {
    Serial.println("Failed to start configuration portal and hit timeout");
    ESP.restart();
  }
  digitalWrite(LED_PIN, HIGH);
  Serial.println("Connected to WiFi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void writeWAVHeaderPlaceholder(File &file) {
  memcpy(header.riff, "RIFF", 4);
  header.fileSize = 0;
  memcpy(header.wave, "WAVE", 4);
  memcpy(header.fmtChunkMarker, "fmt ", 4);
  header.fmtChunkSize = 16;
  header.audioFormat = 1;
  header.numChannels = 1;
  header.sampleRate = SAMPLE_RATE;
  header.bitsPerSample = 16;
  header.byteRate = SAMPLE_RATE * 2;
  header.blockAlign = 2;
  memcpy(header.dataChunkMarker, "data", 4);
  header.dataChunkSize = 0;

  file.write((uint8_t *)&header, sizeof(header));
}

void updateWAVHeader(File &file, uint32_t totalAudioBytes) {
  uint32_t fileSize = 36 + totalAudioBytes;
  file.seek(4);
  file.write((uint8_t *)&fileSize, sizeof(fileSize));
  file.seek(40);
  file.write((uint8_t *)&totalAudioBytes, sizeof(totalAudioBytes));
  file.seek(0, SeekEnd);
}

void startIntroRecording() {
  currentIntroFilePath = "/intro/intro" + String(introCount) + ".wav";
  introFile = SD.open(currentIntroFilePath, FILE_WRITE);
  if (!introFile) {
    Serial.println("‚ùå Failed to open intro file for recording");
    return;
  }
  writeWAVHeaderPlaceholder(introFile);
  introBytesWritten = 0;
  introStartTime = millis();
  isIntroRecording = true;
  Serial.print("üéô Intro recording started: ");
  Serial.println(currentIntroFilePath);
}

void stopIntroRecording() {
  if (!isIntroRecording) return;

  updateWAVHeader(introFile, introBytesWritten);
  introFile.close();
  isIntroRecording = false;

  String path = "/intro/intro" + String(introCount) + ".wav";
  if (xQueueSend(uploadQueue, &path, 0) != pdPASS) {
    Serial.println("‚ö†Ô∏è upload queue full, dropping " + path);
  }
  introCount++;
}

void startRecording() {
  currentFilePath = "/meetings/meeting" + String(meetingCount) + ".wav";
  audioFile = SD.open(currentFilePath, FILE_WRITE);
  if (!audioFile) {
    Serial.println("‚ùå Failed to open file for recording");
    return;
  }
  writeWAVHeaderPlaceholder(audioFile);
  totalBytesWritten = 0;
  chunkStartTime = millis();
  isRecording = true;
  Serial.print("üéô Recording started: ");
  Serial.println(currentFilePath);
}

void stopRecording() {
  stopRequested = true;
}

void setup() {
  Serial.begin(115200);
  delay(1000);

  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  ringBufferMutex = xSemaphoreCreateMutex();
  if (!ringBufferMutex) {
    Serial.println("‚ùå Failed to create ring buffer mutex");
    while(true) delay(1);
  }

  if (!SD.begin(SD_CS_PIN)) {
    Serial.println("‚ùå SD card initialization failed!");
    while (true) delay(100);
  }

  if (!SD.exists("/intro")) SD.mkdir("/intro");
  if (!SD.exists("/meetings")) SD.mkdir("/meetings");

  // Create upload queue and uploader task
  uploadQueue = xQueueCreate(UPLOAD_QUEUE_LENGTH, sizeof(String));
  if (!uploadQueue) {
    Serial.println("‚ùå Failed to create upload queue");
    while(true) delay(1);
  }
  xTaskCreatePinnedToCore(uploaderTask, "UploaderTask", 8192, NULL, 1, NULL, 0);

  connectWiFi();

  i2s_driver_install(I2S_NUM_0, &i2s_config, 0, NULL);
  i2s_set_pin(I2S_NUM_0, &i2s_mic_pins);

  xTaskCreatePinnedToCore(recordingTask, "RecordingTask", 8192, NULL, 1, &recordingTaskHandle, 1);
  xTaskCreatePinnedToCore(processingTask, "ProcessingTask", 8192, NULL, 1, NULL, 0);

  server.on("/", HTTP_GET, []() {
    server.send(200, "text/plain", "ESP32 Audio Recorder API");
  });

  server.on("/start", HTTP_GET, []() {
    if (!isRecording) {
      stopRequested = false;
      startRecording();
      server.send(200, "application/json", "{\"status\":\"started\"}");
    } else {
      server.send(200, "application/json", "{\"status\":\"already_recording\"}");
    }
  });

  server.on("/stop", HTTP_GET, []() {
    if (isRecording) {
      stopRecording();
      server.send(200, "application/json", "{\"status\":\"stopping\"}");
    } else {
      server.send(200, "application/json", "{\"status\":\"not_recording\"}");
    }
  });

  server.on("/status", HTTP_GET, []() {
    String status = isRecording ? "recording" : "stopped";
    String response = "{\"status\":\"" + status + "\",\"meetingCount\":" + String(meetingCount) + "}";
    server.send(200, "application/json", response);
  });

  server.on("/start-intro", HTTP_GET, []() {
    if (!isIntroRecording) {
      startIntroRecording();
      server.send(200, "application/json", "{\"status\":\"intro_started\"}");
    } else {
      server.send(200, "application/json", "{\"status\":\"intro_already_recording\"}");
    }
  });

  server.on("/stop-intro", HTTP_GET, []() {
    if (isIntroRecording) {
      stopIntroRecording();
      server.send(200, "application/json", "{\"status\":\"intro_stopped\"}");
    } else {
      server.send(200, "application/json", "{\"status\":\"no_intro_recording\"}");
    }
  });

  server.begin();
}

void loop() {
  server.handleClient();

  if (Serial.available()) {
    char cmd = Serial.read();
    switch (cmd) {
      case 's':
        if (!isRecording) startRecording();
        break;
      case 'p':
        if (isRecording) stopRecording();
        break;
      case 'r':
        meetingCount = 1;
        Serial.println("‚úÖ Meeting count reset to 1");
        break;
    }
  }

  digitalWrite(LED_PIN, WiFi.status() == WL_CONNECTED ? HIGH : LOW);
  delay(1);
}
